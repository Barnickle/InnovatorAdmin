<Window
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  x:Class="ADiff.FlowDocumentTest"
  x:Name="Window"
  Title="FlowDocumentTest"
  Width="664" Height="868">

  <FlowDocumentScrollViewer>
    <FlowDocumentScrollViewer.Document>
      <FlowDocument>
        <Section BorderBrush="Black" BorderThickness="0,1,0,0">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">GetUniqueFiles(System.Xml.XPath.XPathNodeIterator)</Paragraph>
          <Paragraph TextAlignment="Left">
            Given the set of values (paths) specified, return a structure with each path grouped underneath its checksum and size.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Set of values</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">
            Structure takes the form
            <Floater>
              <Paragraph TextAlignment="Left">
                <LineBreak /> &lt;Result&gt;
                <LineBreak /> &lt;Item type="File" id="{new GUID}"&gt;
                <LineBreak /> &lt;checksum&gt;&lt;/checksum&gt;
                <LineBreak /> &lt;size&gt;&lt;/size&gt;
                <LineBreak /> &lt;paths&gt;
                <LineBreak /> &lt;!-- one or more paths --&gt;
                <LineBreak /> &lt;path&gt;&lt;/path&gt;
                <LineBreak /> &lt;/paths&gt;
                <LineBreak /> &lt;/Item&gt;
                <LineBreak /> &lt;!-- Additional items based on the unique combination of checksum and size --&gt;
                <LineBreak /> &lt;/Result&gt;
                <LineBreak />
              </Paragraph>
            </Floater>
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,1,0,0">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IfNullOrEmpty(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">
            If the input is null or empty return the default value, otherwise, return the input as a string
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Value to check</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>defaultValue</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Value to return if
              <Italic>input</Italic> is null or empty
            </Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">
            <Italic>input</Italic> if it is not null nor empty, otherwise
            <Italic>defaultValue</Italic>
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IndexOf(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Reports the zero-based index of the first occurrence of the specified string in this instance.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to look in</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to seek.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The zero-based index position of
            <Italic>value</Italic> if that string is found, or -1 if it is not. If
            <Italic>value</Italic> is
            <Hyperlink>System.String.Empty</Hyperlink> , the return value is 0.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IndexOf(System.String,System.String,System.StringComparison)</Paragraph>
          <Paragraph TextAlignment="Left">Reports the zero-based index of the first occurrence of the specified string in the current
            <Hyperlink>System.String</Hyperlink> object. A parameter specifies the type of search to use for the specified string.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to look in</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to seek.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>comparisonType</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">One of the enumeration values that specifies the rules for the search.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The index position of the
            <Italic>value</Italic> parameter if that string is found, or -1 if it is not. If
            <Italic>value</Italic> is
            <Hyperlink>System.String.Empty</Hyperlink> , the return value is 0.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>comparisonType</Italic> is not a valid
                    <Hyperlink>System.StringComparison</Hyperlink> value.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IsArasFault(System.Xml.XPath.XPathNodeIterator)</Paragraph>
          <Paragraph TextAlignment="Left">
            Indicates if the AML represents an Aras fault SOAP message
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The AML to test</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>true</Bold> if the AML represents an Aras fault SOAP message, otherwise
            <Bold>false</Bold>
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IsInteger(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">
            Indicates if the given string can be parsed as an integ
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Value to test</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>true</Bold> if the string can be parsed,
            <Bold>false</Bold> otherwise
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">IsNumeric(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">
            Indicates if the given string can be parsed as a floating-point number
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Value test</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>true</Bold> if the string can be parsed,
            <Bold>false</Bold> otherwise
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">LastIndexOf(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Reports the zero-based index position of the last occurrence of a specified string within this instance.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to look in</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to seek.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The zero-based index position of
            <Italic>value</Italic> if that string is found, or -1 if it is not. If
            <Italic>value</Italic> is
            <Hyperlink>System.String.Empty</Hyperlink> , the return value is the last index position in this instance.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">LastIndexOf(System.String,System.String,System.StringComparison)</Paragraph>
          <Paragraph TextAlignment="Left">Reports the zero-based index of the last occurrence of a specified string within the current
            <Hyperlink>System.String</Hyperlink> object. A parameter specifies the type of search to use for the specified string.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to look in</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to seek.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>comparisonType</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">One of the enumeration values that specifies the rules for the search.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The index position of the
            <Italic>value</Italic> parameter if that string is found, or -1 if it is not. If
            <Italic>value</Italic> is
            <Hyperlink>System.String.Empty</Hyperlink> , the return value is the last index position in this instance.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>comparisonType</Italic> is not a valid
                    <Hyperlink>System.StringComparison</Hyperlink> value.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Max(System.Double,System.Double)</Paragraph>
          <Paragraph TextAlignment="Left">Returns the larger of two double-precision floating-point numbers.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>val1</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The first of two double-precision floating-point numbers to compare.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>val2</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The second of two double-precision floating-point numbers to compare.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">Parameter
            <Italic>val1</Italic> or
            <Italic>val2</Italic> , whichever is larger. If
            <Italic>val1</Italic> ,
            <Italic>val2</Italic> , or both
            <Italic>val1</Italic> and
            <Italic>val2</Italic> are equal to
            <Hyperlink>System.Double.NaN</Hyperlink> ,
            <Hyperlink>System.Double.NaN</Hyperlink> is returned.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Min(System.Double,System.Double)</Paragraph>
          <Paragraph TextAlignment="Left">Returns the smaller of two double-precision floating-point numbers.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>val1</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The first of two double-precision floating-point numbers to compare.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>val2</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The second of two double-precision floating-point numbers to compare.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">Parameter
            <Italic>val1</Italic> or
            <Italic>val2</Italic> , whichever is smaller. If
            <Italic>val1</Italic> ,
            <Italic>val2</Italic> , or both
            <Italic>val1</Italic> and
            <Italic>val2</Italic> are equal to
            <Hyperlink>System.Double.NaN</Hyperlink> ,
            <Hyperlink>System.Double.NaN</Hyperlink> is returned.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">NewGuid</Paragraph>
          <Paragraph TextAlignment="Left">Initializes a new instance of the
            <Hyperlink>System.Guid</Hyperlink> class.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A new
            <Hyperlink>System.Guid</Hyperlink> object rendered in uppercase using the
            <Bold>"N"</Bold> format specifier.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">NewGuid(System.String,System.Boolean)</Paragraph>
          <Paragraph TextAlignment="Left">Initializes a new instance of the
            <Hyperlink>System.Guid</Hyperlink> class.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>format</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Format specifier</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>uppercase</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Whether to convert the result to uppercase</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A new
            <Hyperlink>System.Guid</Hyperlink> object using the
            <Italic>format</Italic> specifier.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Now</Paragraph>
          <Paragraph TextAlignment="Left">Gets a
            <Hyperlink>System.DateTime</Hyperlink> object that is set to the current date and time on this computer, expressed as the local time.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.DateTime</Hyperlink> whose value is the current local date and time.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">PadLeft(System.String,System.Int32,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to pad</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>totalWidth</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>paddingChar</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A Unicode padding character.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many
            <Italic>paddingChar</Italic> characters as needed to create a length of
            <Italic>totalWidth</Italic> . However, if
            <Italic>totalWidth</Italic> is less than the length of this instance, the method returns a reference to the existing instance. If
            <Italic>totalWidth</Italic> is equal to the length of this instance, the method returns a new string that is identical to this instance.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentOutOfRangeException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>totalWidth</Italic> is less than zero.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">PadRight(System.String,System.Int32,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to pad</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>totalWidth</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>paddingChar</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A Unicode padding character.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many
            <Italic>paddingChar</Italic> characters as needed to create a length of
            <Italic>totalWidth</Italic> .  However, if
            <Italic>totalWidth</Italic> is less than the length of this instance, the method returns a reference to the existing instance. If
            <Italic>totalWidth</Italic> is equal to the length of this instance, the method returns a new string that is identical to this instance.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentOutOfRangeException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>totalWidth</Italic> is less than zero.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Pow(System.Double,System.Double)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a specified number raised to the specified power.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>x</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A double-precision floating-point number to be raised to a power.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>y</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A double-precision floating-point number that specifies a power.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The number
            <Italic>x</Italic> raised to the power
            <Italic>y</Italic> .
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">RegExMatch(System.String,System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Searches the specified input string for the first occurrence of the regular expression supplied in the
            <Italic>pattern</Italic> parameter.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to search for a match.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>pattern</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The regular expression pattern to match.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>options</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Options.
              <Bold>i</Bold> indicates to ignore case.
              <Bold>m</Bold> indicates to ^ and $ should match a line within
              <Italic>input</Italic> , not just the start and end.
            </Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">An object that contains information about the match.  The format of this object is
            <Floater>
              <Paragraph TextAlignment="Left">
                <LineBreak /> &lt;Group&gt; &lt;!-- One or more --&gt;
                <LineBreak /> &lt;Capture&gt; &lt;!-- One or more --&gt;
                <LineBreak /> &lt;Index /&gt;
                <LineBreak /> &lt;Length /&gt;
                <LineBreak /> &lt;Value /&gt;
                <LineBreak /> &lt;/Capture&gt;
                <LineBreak /> &lt;Index /&gt;
                <LineBreak /> &lt;Length /&gt;
                <LineBreak /> &lt;Success /&gt;
                <LineBreak /> &lt;Value /&gt;
                <LineBreak /> &lt;/Group&gt;
                <LineBreak /> &lt;Index /&gt;
                <LineBreak /> &lt;Length /&gt;
                <LineBreak /> &lt;Success /&gt;
                <LineBreak /> &lt;Value /&gt;
                <LineBreak />
              </Paragraph>
            </Floater>
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>A regular expression parsing error has occurred.</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>input</Italic> is null. -or-
                    <Italic>pattern</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Replace(System.String,System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to replace content within</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>oldValue</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to be replaced.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>newValue</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to replace all occurrences of
              <Italic>oldValue</Italic> .
            </Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A string that is equivalent to the current string except that all instances of
            <Italic>oldValue</Italic> are replaced with
            <Italic>newValue</Italic> .
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>oldValue</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>oldValue</Italic> is the empty string ("").
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Replace(System.String,System.String,System.String,System.StringComparison)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.  The search takes place using the rules of the
            <Italic>comparisonType</Italic>
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to replace content within</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>oldValue</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to be replaced.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>newValue</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to replace all occurrences of
              <Italic>oldValue</Italic> .
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>comparisonType</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">One of the enumeration values that specifies the rules for the search.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A string that is equivalent to the current string except that all instances of
            <Italic>oldValue</Italic> are replaced with
            <Italic>newValue</Italic> .
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>oldValue</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>oldValue</Italic> is the empty string ("").
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Sign(System.Double)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a value indicating the sign of a double-precision floating-point number.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A signed number.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A number indicating the sign of
            <Italic>value</Italic> .Number Description -1
            <Italic>value</Italic> is less than zero. 0
            <Italic>value</Italic> is equal to zero. 1
            <Italic>value</Italic> is greater than zero.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArithmeticException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is equal to
                    <Hyperlink>System.Double.NaN</Hyperlink> .
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Split(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. A parameter specifies whether to return empty array elements.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to split</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>separator</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A string that delimits the substrings in this string</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">An array whose elements contain the substrings in this string that are delimited by one or more strings in
            <Italic>separator</Italic> . For more information, see the Remarks section.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Sqrt(System.Double)</Paragraph>
          <Paragraph TextAlignment="Left">Returns the square root of a specified number.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>d</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A number.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">Value of
            <Italic>d</Italic> Returns Zero, or positive The positive square root of
            <Italic>d</Italic> . Negative
            <Hyperlink>System.Double.NaN</Hyperlink> If
            <Italic>d</Italic> is equal to
            <Hyperlink>System.Double.NaN</Hyperlink> or
            <Hyperlink>System.Double.PositiveInfinity</Hyperlink> , that value is returned.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">StartsWith(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Determines whether the beginning of this string instance matches the specified string.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to test</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to compare.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">true if
            <Italic>value</Italic> matches the beginning of this string; otherwise, false.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">StartsWith(System.String,System.String,System.StringComparison)</Paragraph>
          <Paragraph TextAlignment="Left">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to test</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">The string to compare.</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>comparisonType</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">One of the enumeration values that determines how this string and
              <Italic>value</Italic> are compared.
            </Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">true if this instance begins with
            <Italic>value</Italic> ; otherwise, false.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="16">Exceptions</Paragraph>
          <Table>
            <Table.Columns>
              <TableColumn />
              <TableColumn />
            </Table.Columns>
            <TableRowGroup>
              <TableRow Background="#FFDDDDDD" Foreground="#FF555555">
                <TableCell>
                  <Paragraph TextAlignment="Left">Exception</Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph TextAlignment="Left">Condition</Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentNullException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>value</Italic> is null.
                  </Paragraph>
                </TableCell>
              </TableRow>
              <TableRow>
                <TableCell>
                  <Paragraph>
                    <Hyperlink>System.ArgumentException</Hyperlink>
                  </Paragraph>
                </TableCell>
                <TableCell>
                  <Paragraph>
                    <Italic>comparisonType</Italic> is not a
                    <Hyperlink>System.StringComparison</Hyperlink> value.
                  </Paragraph>
                </TableCell>
              </TableRow>
            </TableRowGroup>
          </Table>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Today</Paragraph>
          <Paragraph TextAlignment="Left">Gets the current date.</Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.DateTime</Hyperlink> set to today's date, with the time component set to 00:00:00.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">ToLower(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a copy of this
            <Hyperlink>System.String</Hyperlink> converted to lowercase, using the casing rules of the current culture.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.String</Hyperlink> in lowercase.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">ToLowerInvariant(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a copy of this
            <Hyperlink>System.String</Hyperlink> object converted to lowercase using the casing rules of the invariant culture.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.String</Hyperlink> object in lowercase.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">ToUpper(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a copy of this
            <Hyperlink>System.String</Hyperlink> converted to uppercase, using the casing rules of the current culture.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.String</Hyperlink> in uppercase.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">ToUpperInvariant(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Returns a copy of this
            <Hyperlink>System.String</Hyperlink> object converted to uppercase using the casing rules of the invariant culture.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">A
            <Hyperlink>System.String</Hyperlink> object in uppercase.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">Trim(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Removes all leading and trailing white-space characters from the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The string that remains after all white-space characters are removed from the start and end of the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TrimEnd(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Removes all trailing white-space characters from the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The string that remains after all white-space characters are removed from the end of the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TrimEnd(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Removes all trailing occurrences of a set of characters specified in an array from the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>trimChars</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">A string of Unicode characters to remove or null.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The string that remains after all occurrences of the characters in the
            <Italic>trimChars</Italic> parameter are removed from the end of the current
            <Hyperlink>System.String</Hyperlink> object. If
            <Italic>trimChars</Italic> is null or an empty array, white-space characters are removed instead.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TrimStart(System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Removes all leading white-space characters from the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The string that remains after all white-space characters are removed from the start of the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TrimStart(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">Removes all leading occurrences of a set of characters specified in an array from the current
            <Hyperlink>System.String</Hyperlink> object.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>input</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to transform</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>trimChars</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">An array of Unicode characters to remove or null.</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">The string that remains after all occurrences of characters in the
            <Italic>trimChars</Italic> parameter are removed from the start of the current
            <Hyperlink>System.String</Hyperlink> object. If
            <Italic>trimChars</Italic> is null or an empty array, white-space characters are removed instead.
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TryFormatDate(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">
            Attempts to convert the
            <Italic>value</Italic> parameter to a
            <Hyperlink>System.DateTime</Hyperlink> and render it to a
            <Hyperlink>System.String</Hyperlink> using the given format specifier.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to format</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>format</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Format specifier</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">If
            <Italic>value</Italic> represents a valid
            <Hyperlink>System.DateTime</Hyperlink> , the
            <Hyperlink>System.DateTime</Hyperlink> is rendered using the
            <Italic>format</Italic> specifier. Otherwise,
            <Italic>value</Italic> is returned
          </Paragraph>
        </Section>
        <Section BorderBrush="Black" BorderThickness="0,0,0,1">
          <Paragraph TextAlignment="Left" FontSize="24" FontWeight="Bold">TryFormatInt(System.String,System.String)</Paragraph>
          <Paragraph TextAlignment="Left">
            Attempts to convert the
            <Italic>value</Italic> parameter to a
            <Hyperlink>System.Integer</Hyperlink> and render it to a
            <Hyperlink>System.String</Hyperlink> using the given format specifier.
          </Paragraph>
          <Paragraph TextAlignment="Left" FontSize="20" FontWeight="Bold">Syntax</Paragraph>
          <Section>
            <Paragraph TextAlignment="Left">
              <Bold>Parameters</Bold>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>value</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">String value to format</Paragraph>
            <Paragraph TextAlignment="Left" Margin="Auto,Auto,Auto,0">
              <Italic>format</Italic>
            </Paragraph>
            <Paragraph TextAlignment="Left" Margin="30,0,Auto,Auto">Format specifier</Paragraph>
          </Section>
          <Paragraph TextAlignment="Left">
            <Bold>Return Value:</Bold>
          </Paragraph>
          <Paragraph TextAlignment="Left">If
            <Italic>value</Italic> represents a valid
            <Hyperlink>System.Integer</Hyperlink> , the
            <Hyperlink>System.Integer</Hyperlink> is rendered using the
            <Italic>format</Italic> specifier. Otherwise,
            <Italic>value</Italic> is returned
          </Paragraph>
        </Section>
      </FlowDocument>
    </FlowDocumentScrollViewer.Document>
  </FlowDocumentScrollViewer>
</Window>